# Tenant Details


# List of SharePoint Sites
$SiteUrls = @(
    "https://",
    "https://"
)

# List of Users to Check Permissions
$UserUPNs = @(
    "",
    ""
)

# Excluded Lists
$ExcludedLists = @("Access Requests", "App Packages", "appdata", "appfiles", "Apps in Testing", "Cache Profiles", 
    "Composed Looks", "Content and Structure Reports", "Content type publishing error log", "Converted Forms",
    "Device Channels", "Form Templates", "fpdatasources", "Get started with Apps for Office and SharePoint", 
    "List Template Gallery", "Long Running Operation Status", "Maintenance Log Library", "Images", "site collection images",
    "Master Docs", "Master Page Gallery", "MicroFeed", "NintexFormXml", "Quick Deploy Items", "Relationships List", 
    "Reusable Content", "Reporting Metadata", "Reporting Templates", "Search Config List", "Site Assets", 
    "Preservation Hold Library", "Solution Gallery", "Style Library", "Suggested Content Browser Locations", 
    "Theme Gallery", "TaxonomyHiddenList", "User Information List", "Web Part Gallery", "wfpub", "wfsvc", 
    "Workflow History", "Workflow Tasks", "Pages")

# Loop through each SharePoint site
foreach ($siteUrl in $SiteUrls) {
    Write-Host "Connecting to: $siteUrl" -ForegroundColor Cyan
    Connect-PnPOnline -Url $siteUrl -ClientId $ClientId -Thumbprint $ThumbPrint -Tenant $TenantId

    # Get all document libraries
    $lists = Invoke-PnPSPRestMethod -Url "$siteUrl/_api/web/lists" -Method Get
    $reportData = @()

    foreach ($list in $lists.value) {
        if ($list.Title -in $ExcludedLists) { continue }

        if ($list.BaseTemplate -eq 101) {
            Write-Host "Processing Document Library: $($list.Title)" -ForegroundColor Yellow

            $nextPageUrl = "$siteUrl/_api/web/lists(guid'$($list.Id)')/items?`$top=1000"
            do {
                try {
                    $response = Invoke-PnPSPRestMethod -Url $nextPageUrl -Method Get
                    $listItems = $response.value
                    $nextPageUrl = $response."odata.nextLink"

                    foreach ($item in $listItems) {
                        try {
                            # Check unique permissions
                            $uniquePerms = Invoke-PnPSPRestMethod -Url "$siteUrl/_api/web/lists(guid'$($list.Id)')/items($($item.Id))/HasUniqueRoleAssignments" -Method Get
                            if (-not $uniquePerms.value) { continue }

                            # Determine if the item is a file or folder
                            $itemType = switch ($item.FileSystemObjectType) {
                                0 { 
                                    $file = Invoke-PnPSPRestMethod -Url "$siteUrl/_api/web/lists(guid'$($list.Id)')/items($($item.Id))/file" -Method Get
                                    "File"
                                }
                                1 { 
                                    $folder = Invoke-PnPSPRestMethod -Url "$siteUrl/_api/web/lists(guid'$($list.Id)')/items($($item.Id))/folder" -Method Get
                                    "Folder"
                                }
                                default { "ListItem" }
                            }

                            # Get permissions info
                            $permsInfo = Invoke-PnPSPRestMethod -Url "$siteUrl/_api/web/lists(guid'$($list.Id)')/items($($item.Id))/GetSharingInformation?`$expand=permissionsInformation" -Method Get

                            foreach ($UserUPN in $UserUPNs) {
                                $readSources = @()
                                $editSources = @()
                                $fullControl = $false

                                # Process direct permissions
                                if ($permsInfo.permissionsInformation.principals) {
                                    foreach ($principal in $permsInfo.permissionsInformation.principals) {
                                        $principalUpn = $principal.principal.userPrincipalName ?? $principal.principal.email
                                        if ($principalUpn -like "*$UserUPN*") { 
                                            switch ($principal.role) {
                                                1 { $readSources += "Direct Permission" }
                                                2 { $editSources += "Direct Permission" }
                                                3 { $fullControl = $true }
                                            }
                                        }
                                    }
                                }

                                # Process sharing links
                                if ($permsInfo.permissionsInformation.links) {
                                    foreach ($link in $permsInfo.permissionsInformation.links) {
                                        $linkUrl = $link.linkDetails.Url
                                        
                                        if ($link.linkMembers) {
                                            foreach ($member in $link.linkMembers) {
                                                $memberUpn = $member.userPrincipalName ?? $member.email
                                                if ($memberUpn -like "*$UserUPN*") {
                                                    if ($link.linkDetails.IsEditLink -or $link.linkDetails.IsReviewLink) {
                                                        $editSources += $linkUrl
                                                    }
                                                    else {
                                                        $readSources += $linkUrl
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                # Build report entry
                                $reportEntry = [PSCustomObject]@{
                                    SiteName    = $siteUrl.Split("/")[-1]
                                    ItemID      = $item.Id
                                    UserUPN     = $UserUPN
                                    ItemType    = $itemType
                                    Name        = if ($itemType -eq "File") { $file.Name } 
                                                elseif ($itemType -eq "Folder") { $folder.Name } 
                                                else { $item.Title }
                                    Location    = if ($itemType -eq "File") { $file.ServerRelativeUrl } 
                                                elseif ($itemType -eq "Folder") { $folder.ServerRelativeUrl } 
                                                else { "" }
                                    Size        = if ($itemType -eq "File") { $file.Length } else { "" }
                                    Read        = $readSources -join "`n"
                                    Edit        = $editSources -join "`n"
                                    FullControl = if ($fullControl) { "Yes" } else { "" }
                                }
                                $reportData += $reportEntry
                            }

                        } catch {
                            Write-Host "Error processing item $($item.Id): $_" -ForegroundColor Red
                        }
                    }
                } catch {
                    Write-Host "Error retrieving items: $_" -ForegroundColor Red
                    $nextPageUrl = $null
                }
            } while ($nextPageUrl)
        }
    }

    # Generate CSV report
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $siteName = $siteUrl.Split("/")[-1]
    $fileName = "$siteName-PermissionsReport_$timestamp.csv"
    $reportData | Export-Csv -Path $fileName -NoTypeInformation -Encoding UTF8

    Write-Host "Report generated: $fileName" -ForegroundColor Green
    Disconnect-PnPOnline
}
